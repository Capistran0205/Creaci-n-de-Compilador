
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 22 15:23:08 CST 2025
//----------------------------------------------------

package AnalizadorSintactico.app.com;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 22 15:23:08 CST 2025
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\011\000\002\007" +
    "\004\000\002\007\003\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\005\000\002\003\004\000\002\004\005\000\002\004" +
    "\003\000\002\005\003\000\002\005\005\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\016\004\000\002\017\004" +
    "\000\002\012\005\000\002\013\005\000\002\013\007\000" +
    "\002\013\006\000\002\013\010\000\002\022\004\000\002" +
    "\022\005\000\002\014\011\000\002\014\015\000\002\015" +
    "\011\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\020\005\000\002\020\003\000\002\020\003" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\004\005\001\002\000\004\002\213\001" +
    "\002\000\004\012\006\001\002\000\004\023\007\001\002" +
    "\000\004\024\010\001\002\000\004\025\011\001\002\000" +
    "\032\004\037\005\014\006\025\007\015\010\012\011\023" +
    "\013\016\015\022\061\021\062\030\063\031\067\032\001" +
    "\002\000\004\061\uffed\001\002\000\034\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\013\ufffe\015\ufffe\026" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\067\ufffe\001\002\000\004" +
    "\061\uffec\001\002\000\004\061\uffea\001\002\000\004\014" +
    "\211\001\002\000\004\066\210\001\002\000\034\004\037" +
    "\005\014\006\025\007\015\010\012\011\023\013\016\015" +
    "\022\026\207\061\021\062\030\063\031\067\032\001\002" +
    "\000\022\032\200\050\174\051\176\052\171\053\175\054" +
    "\172\055\173\056\177\001\002\000\004\016\156\001\002" +
    "\000\004\061\uffee\001\002\000\004\061\147\001\002\000" +
    "\004\061\uffeb\001\002\000\004\066\146\001\002\000\004" +
    "\066\145\001\002\000\004\023\137\001\002\000\004\023" +
    "\046\001\002\000\004\065\044\001\002\000\034\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\013\ufff6\015" +
    "\ufff6\026\ufff6\061\ufff6\062\ufff6\063\ufff6\067\ufff6\001\002" +
    "\000\004\066\043\001\002\000\004\066\042\001\002\000" +
    "\004\066\041\001\002\000\004\061\uffef\001\002\000\034" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\013" +
    "\ufff7\015\ufff7\026\ufff7\061\ufff7\062\ufff7\063\ufff7\067\ufff7" +
    "\001\002\000\034\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\013\ufff9\015\ufff9\026\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\067\ufff9\001\002\000\034\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\013\ufffa\015\ufffa\026\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\067\ufffa\001\002\000\034\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\013\ufffb" +
    "\015\ufffb\026\ufffb\061\ufffb\062\ufffb\063\ufffb\067\ufffb\001" +
    "\002\000\004\066\045\001\002\000\034\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\015\ufff5\026" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\067\ufff5\001\002\000\022" +
    "\020\055\021\052\023\053\047\057\057\047\060\051\061" +
    "\054\065\056\001\002\000\044\016\uffbf\022\uffbf\024\uffbf" +
    "\031\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\066\uffbf\001\002\000\044\016\uffc9\022\uffc9\024\uffc9\031" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\066" +
    "\uffc9\001\002\000\044\016\uffbe\022\uffbe\024\uffbe\031\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\066\uffbe" +
    "\001\002\000\044\016\uffc0\022\uffc0\024\uffc0\031\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\066\uffc0\001" +
    "\002\000\022\020\055\021\052\023\053\047\057\057\047" +
    "\060\051\061\054\065\056\001\002\000\056\016\uffc8\022" +
    "\uffc8\024\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\052\123\053\126\054\124\055\125\056\127" +
    "\066\uffc8\001\002\000\044\016\uffc1\022\uffc1\024\uffc1\031" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\066" +
    "\uffc1\001\002\000\044\016\uffc2\022\uffc2\024\uffc2\031\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\066\uffc2" +
    "\001\002\000\022\020\055\021\052\023\053\047\057\057" +
    "\047\060\051\061\054\065\056\001\002\000\034\024\071" +
    "\033\061\034\070\035\073\036\066\037\063\040\075\041" +
    "\074\042\065\043\064\044\072\045\062\046\067\001\002" +
    "\000\022\020\055\021\052\023\053\047\057\057\047\060" +
    "\051\061\054\065\056\001\002\000\022\020\055\021\052" +
    "\023\053\047\057\057\047\060\051\061\054\065\056\001" +
    "\002\000\022\020\055\021\052\023\053\047\057\057\047" +
    "\060\051\061\054\065\056\001\002\000\022\020\055\021" +
    "\052\023\053\047\057\057\047\060\051\061\054\065\056" +
    "\001\002\000\022\020\055\021\052\023\053\047\057\057" +
    "\047\060\051\061\054\065\056\001\002\000\022\020\055" +
    "\021\052\023\053\047\057\057\047\060\051\061\054\065" +
    "\056\001\002\000\022\020\055\021\052\023\053\047\057" +
    "\057\047\060\051\061\054\065\056\001\002\000\022\020" +
    "\055\021\052\023\053\047\057\057\047\060\051\061\054" +
    "\065\056\001\002\000\004\025\102\001\002\000\022\020" +
    "\055\021\052\023\053\047\057\057\047\060\051\061\054" +
    "\065\056\001\002\000\022\020\055\021\052\023\053\047" +
    "\057\057\047\060\051\061\054\065\056\001\002\000\022" +
    "\020\055\021\052\023\053\047\057\057\047\060\051\061" +
    "\054\065\056\001\002\000\022\020\055\021\052\023\053" +
    "\047\057\057\047\060\051\061\054\065\056\001\002\000" +
    "\034\016\uffd1\022\uffd1\024\uffd1\031\uffd1\033\061\034\070" +
    "\035\073\036\066\043\uffd1\044\uffd1\045\uffd1\046\uffd1\066" +
    "\uffd1\001\002\000\034\016\uffd2\022\uffd2\024\uffd2\031\uffd2" +
    "\033\061\034\070\035\073\036\066\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\066\uffd2\001\002\000\044\016\uffd5\022\uffd5" +
    "\024\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\066\uffd5\001\002\000\040\016\uffce\022\uffce\024" +
    "\uffce\031\uffce\033\061\034\070\035\073\036\066\037\063" +
    "\040\075\041\074\042\065\045\uffce\046\uffce\066\uffce\001" +
    "\002\000\032\004\037\005\014\006\025\007\015\010\012" +
    "\011\023\013\016\015\022\061\021\062\030\063\031\067" +
    "\032\001\002\000\034\004\037\005\014\006\025\007\015" +
    "\010\012\011\023\013\016\015\022\026\105\061\021\062" +
    "\030\063\031\067\032\001\002\000\034\004\uffff\005\uffff" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\013\uffff\015\uffff\026" +
    "\uffff\061\uffff\062\uffff\063\uffff\067\uffff\001\002\000\036" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\013" +
    "\uffda\015\uffda\026\uffda\061\uffda\062\uffda\063\uffda\064\106" +
    "\067\uffda\001\002\000\004\025\107\001\002\000\032\004" +
    "\037\005\014\006\025\007\015\010\012\011\023\013\016" +
    "\015\022\061\021\062\030\063\031\067\032\001\002\000" +
    "\034\004\037\005\014\006\025\007\015\010\012\011\023" +
    "\013\016\015\022\026\111\061\021\062\030\063\031\067" +
    "\032\001\002\000\034\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\013\uffd9\015\uffd9\026\uffd9\061\uffd9\062" +
    "\uffd9\063\uffd9\067\uffd9\001\002\000\044\016\uffd6\022\uffd6" +
    "\024\uffd6\031\uffd6\033\uffd6\034\uffd6\035\073\036\066\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\066\uffd6\001\002\000\044\016\uffcc\022\uffcc\024" +
    "\uffcc\031\uffcc\033\061\034\070\035\073\036\066\037\063" +
    "\040\075\041\074\042\065\043\064\044\072\045\062\046" +
    "\uffcc\066\uffcc\001\002\000\044\016\uffd4\022\uffd4\024\uffd4" +
    "\031\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\066\uffd4\001\002\000\034\016\uffd0\022\uffd0\024\uffd0\031" +
    "\uffd0\033\061\034\070\035\073\036\066\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\066\uffd0\001\002\000\040\016\uffcf\022" +
    "\uffcf\024\uffcf\031\uffcf\033\061\034\070\035\073\036\066" +
    "\037\063\040\075\041\074\042\065\045\uffcf\046\uffcf\066" +
    "\uffcf\001\002\000\034\016\uffd3\022\uffd3\024\uffd3\031\uffd3" +
    "\033\061\034\070\035\073\036\066\043\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\066\uffd3\001\002\000\044\016\uffcd\022\uffcd" +
    "\024\uffcd\031\uffcd\033\061\034\070\035\073\036\066\037" +
    "\063\040\075\041\074\042\065\043\064\044\072\045\uffcd" +
    "\046\uffcd\066\uffcd\001\002\000\044\016\uffd7\022\uffd7\024" +
    "\uffd7\031\uffd7\033\uffd7\034\uffd7\035\073\036\066\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\066\uffd7\001\002\000\044\016\uffcb\022\uffcb\024\uffcb" +
    "\031\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\066\uffcb\001\002\000\022\020\055\021\052\023\053\047" +
    "\057\057\047\060\051\061\054\065\056\001\002\000\022" +
    "\020\055\021\052\023\053\047\057\057\047\060\051\061" +
    "\054\065\056\001\002\000\022\020\055\021\052\023\053" +
    "\047\057\057\047\060\051\061\054\065\056\001\002\000" +
    "\022\020\055\021\052\023\053\047\057\057\047\060\051" +
    "\061\054\065\056\001\002\000\022\020\055\021\052\023" +
    "\053\047\057\057\047\060\051\061\054\065\056\001\002" +
    "\000\044\016\uffc3\022\uffc3\024\uffc3\031\uffc3\033\061\034" +
    "\070\035\073\036\066\037\063\040\075\041\074\042\065" +
    "\043\064\044\072\045\062\046\067\066\uffc3\001\002\000" +
    "\044\016\uffc6\022\uffc6\024\uffc6\031\uffc6\033\061\034\070" +
    "\035\073\036\066\037\063\040\075\041\074\042\065\043" +
    "\064\044\072\045\062\046\067\066\uffc6\001\002\000\044" +
    "\016\uffc4\022\uffc4\024\uffc4\031\uffc4\033\061\034\070\035" +
    "\073\036\066\037\063\040\075\041\074\042\065\043\064" +
    "\044\072\045\062\046\067\066\uffc4\001\002\000\044\016" +
    "\uffc5\022\uffc5\024\uffc5\031\uffc5\033\061\034\070\035\073" +
    "\036\066\037\063\040\075\041\074\042\065\043\064\044" +
    "\072\045\062\046\067\066\uffc5\001\002\000\044\016\uffc7" +
    "\022\uffc7\024\uffc7\031\uffc7\033\061\034\070\035\073\036" +
    "\066\037\063\040\075\041\074\042\065\043\064\044\072" +
    "\045\062\046\067\066\uffc7\001\002\000\034\024\136\033" +
    "\061\034\070\035\073\036\066\037\063\040\075\041\074" +
    "\042\065\043\064\044\072\045\062\046\067\001\002\000" +
    "\044\016\uffca\022\uffca\024\uffca\031\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\066\uffca\001\002\000\022" +
    "\020\055\021\052\023\053\047\057\057\047\060\051\061" +
    "\054\065\056\001\002\000\034\024\141\033\061\034\070" +
    "\035\073\036\066\037\063\040\075\041\074\042\065\043" +
    "\064\044\072\045\062\046\067\001\002\000\004\025\142" +
    "\001\002\000\032\004\037\005\014\006\025\007\015\010" +
    "\012\011\023\013\016\015\022\061\021\062\030\063\031" +
    "\067\032\001\002\000\034\004\037\005\014\006\025\007" +
    "\015\010\012\011\023\013\016\015\022\026\144\061\021" +
    "\062\030\063\031\067\032\001\002\000\034\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\015\uffd8" +
    "\026\uffd8\061\uffd8\062\uffd8\063\uffd8\067\uffd8\001\002\000" +
    "\034\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\013\ufffc\015\ufffc\026\ufffc\061\ufffc\062\ufffc\063\ufffc\067" +
    "\ufffc\001\002\000\034\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\013\ufff8\015\ufff8\026\ufff8\061\ufff8\062" +
    "\ufff8\063\ufff8\067\ufff8\001\002\000\010\031\ufff1\032\154" +
    "\066\ufff1\001\002\000\006\031\ufff2\066\ufff2\001\002\000" +
    "\006\031\152\066\ufff4\001\002\000\004\061\147\001\002" +
    "\000\006\031\ufff3\066\ufff3\001\002\000\022\020\055\021" +
    "\052\023\053\047\057\057\047\060\051\061\054\065\056" +
    "\001\002\000\036\031\ufff0\033\061\034\070\035\073\036" +
    "\066\037\063\040\075\041\074\042\065\043\064\044\072" +
    "\045\062\046\067\066\ufff0\001\002\000\022\020\055\021" +
    "\052\023\053\047\057\057\047\060\051\061\054\065\056" +
    "\001\002\000\040\016\162\022\161\033\061\034\070\035" +
    "\073\036\066\037\063\040\075\041\074\042\065\043\064" +
    "\044\072\045\062\046\067\066\uffe0\001\002\000\010\016" +
    "\166\022\165\066\uffde\001\002\000\022\020\055\021\052" +
    "\023\053\047\057\057\047\060\051\061\054\065\056\001" +
    "\002\000\004\017\163\001\002\000\004\066\uffdf\001\002" +
    "\000\040\016\uffdc\022\uffdc\033\061\034\070\035\073\036" +
    "\066\037\063\040\075\041\074\042\065\043\064\044\072" +
    "\045\062\046\067\066\uffdc\001\002\000\022\020\055\021" +
    "\052\023\053\047\057\057\047\060\051\061\054\065\056" +
    "\001\002\000\004\017\167\001\002\000\004\066\uffdd\001" +
    "\002\000\040\016\uffdb\022\uffdb\033\061\034\070\035\073" +
    "\036\066\037\063\040\075\041\074\042\065\043\064\044" +
    "\072\045\062\046\067\066\uffdb\001\002\000\022\020\055" +
    "\021\052\023\053\047\057\057\047\060\051\061\054\065" +
    "\056\001\002\000\022\020\055\021\052\023\053\047\057" +
    "\057\047\060\051\061\054\065\056\001\002\000\022\020" +
    "\055\021\052\023\053\047\057\057\047\060\051\061\054" +
    "\065\056\001\002\000\004\066\uffe3\001\002\000\022\020" +
    "\055\021\052\023\053\047\057\057\047\060\051\061\054" +
    "\065\056\001\002\000\004\066\uffe2\001\002\000\022\020" +
    "\055\021\052\023\053\047\057\057\047\060\051\061\054" +
    "\065\056\001\002\000\022\020\055\021\052\023\053\047" +
    "\057\057\047\060\051\061\054\065\056\001\002\000\034" +
    "\033\061\034\070\035\073\036\066\037\063\040\075\041" +
    "\074\042\065\043\064\044\072\045\062\046\067\066\uffe9" +
    "\001\002\000\034\033\061\034\070\035\073\036\066\037" +
    "\063\040\075\041\074\042\065\043\064\044\072\045\062" +
    "\046\067\066\uffe4\001\002\000\034\033\061\034\070\035" +
    "\073\036\066\037\063\040\075\041\074\042\065\043\064" +
    "\044\072\045\062\046\067\066\uffe7\001\002\000\034\033" +
    "\061\034\070\035\073\036\066\037\063\040\075\041\074" +
    "\042\065\043\064\044\072\045\062\046\067\066\uffe5\001" +
    "\002\000\034\033\061\034\070\035\073\036\066\037\063" +
    "\040\075\041\074\042\065\043\064\044\072\045\062\046" +
    "\067\066\uffe6\001\002\000\034\033\061\034\070\035\073" +
    "\036\066\037\063\040\075\041\074\042\065\043\064\044" +
    "\072\045\062\046\067\066\uffe8\001\002\000\004\002\000" +
    "\001\002\000\034\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\013\ufffd\015\ufffd\026\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\067\ufffd\001\002\000\004\061\212\001\002\000" +
    "\004\066\uffe1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\016\006\012\007\017\012\025\013" +
    "\035\014\037\015\032\016\033\017\034\023\023\025\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\016\006\103\012\025\013\035\014\037\015" +
    "\032\016\033\017\034\023\023\025\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\150\005\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\057\024" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\134\024\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\121\024\047\001\001\000\002\001\001\000" +
    "\006\020\120\024\047\001\001\000\006\020\117\024\047" +
    "\001\001\000\006\020\116\024\047\001\001\000\006\020" +
    "\115\024\047\001\001\000\006\020\114\024\047\001\001" +
    "\000\006\020\113\024\047\001\001\000\006\020\112\024" +
    "\047\001\001\000\006\020\111\024\047\001\001\000\002" +
    "\001\001\000\006\020\100\024\047\001\001\000\006\020" +
    "\077\024\047\001\001\000\006\020\076\024\047\001\001" +
    "\000\006\020\075\024\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\016\006\012\007\102\012\025\013\035\014\037\015" +
    "\032\016\033\017\034\023\023\025\026\001\001\000\026" +
    "\003\016\006\103\012\025\013\035\014\037\015\032\016" +
    "\033\017\034\023\023\025\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\016\006" +
    "\012\007\107\012\025\013\035\014\037\015\032\016\033" +
    "\017\034\023\023\025\026\001\001\000\026\003\016\006" +
    "\103\012\025\013\035\014\037\015\032\016\033\017\034" +
    "\023\023\025\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\133\024\047" +
    "\001\001\000\006\020\132\024\047\001\001\000\006\020" +
    "\131\024\047\001\001\000\006\020\130\024\047\001\001" +
    "\000\006\020\127\024\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\137\024\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\016\006\012\007\142\012\025\013\035\014" +
    "\037\015\032\016\033\017\034\023\023\025\026\001\001" +
    "\000\026\003\016\006\103\012\025\013\035\014\037\015" +
    "\032\016\033\017\034\023\023\025\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\152" +
    "\001\001\000\002\001\001\000\006\020\154\024\047\001" +
    "\001\000\002\001\001\000\006\020\156\024\047\001\001" +
    "\000\004\022\157\001\001\000\002\001\001\000\006\020" +
    "\163\024\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\167\024\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\205\024\047\001\001\000\006\020\204\024\047\001" +
    "\001\000\006\020\203\024\047\001\001\000\002\001\001" +
    "\000\006\020\202\024\047\001\001\000\002\001\001\000" +
    "\006\020\201\024\047\001\001\000\006\020\200\024\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LITERAL ::= OperadorFalse 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LITERAL ::= OperadorTrue 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LITERAL ::= CharText 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LITERAL ::= CadenaText 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LITERAL ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= Identificador OperadorAModulo EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= Identificador OperadorADivision EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= Identificador OperadorAMultiplicacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= Identificador OperadorAResta EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= Identificador OperadorASuma EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= ParentesisApertura EXPRESION ParentesisCierre 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= OperadorLNot EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION OperadorLOr EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION OperadorLAnd EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION OperadorDiferente EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION OperadorIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION OperadorMenorIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION OperadorMenor EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION OperadorMayorIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION OperadorMayor EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION OperadorDivision EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION OperadorMultiplicacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION OperadorResta EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION OperadorSuma EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION_WHILE ::= InstruccionWhile ParentesisApertura EXPRESION ParentesisCierre LlaveApertura INSTRUCCIONES LlaveCierre 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_WHILE",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION_CONDICIONAL ::= InstruccionIf ParentesisApertura EXPRESION ParentesisCierre LlaveApertura INSTRUCCIONES LlaveCierre InstruccionElse LlaveApertura INSTRUCCIONES LlaveCierre 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CONDICIONAL",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION_CONDICIONAL ::= InstruccionIf ParentesisApertura EXPRESION ParentesisCierre LlaveApertura INSTRUCCIONES LlaveCierre 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CONDICIONAL",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONCATENAR ::= CONCATENAR ConcatenacionText EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONCATENAR",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONCATENAR ::= ConcatenacionText EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONCATENAR",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION_COUT ::= SalidaInfo OperadorSalida EXPRESION CONCATENAR OperadorSalida SaltoLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_COUT",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION_COUT ::= SalidaInfo OperadorSalida EXPRESION CONCATENAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_COUT",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCION_COUT ::= SalidaInfo OperadorSalida EXPRESION OperadorSalida SaltoLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_COUT",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCCION_COUT ::= SalidaInfo OperadorSalida EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_COUT",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION_CIN ::= EntradaInfo OperadorEntrada Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CIN",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECREMENTO ::= Identificador OperadorDecremento 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECREMENTO",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INCREMENTO ::= Identificador OperadorIncremento 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION ::= Identificador OperadorAModulo EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION ::= Identificador OperadorADivision EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION ::= Identificador OperadorAMultiplicacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION ::= Identificador OperadorAResta EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACION ::= Identificador OperadorASuma EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION ::= Identificador OperadorAsignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= TipoBoolean 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= TipoChar 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= TipoString 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= TipoDouble 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= TipoFloat 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= TipoInt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_SIMPLE ::= Identificador OperadorAsignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION_SIMPLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA_DECLARACIONES ::= DECLARACION_SIMPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_DECLARACIONES ::= LISTA_DECLARACIONES Separador DECLARACION_SIMPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= TIPO LISTA_DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= FinPrograma Numero FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= INSTRUCCION_WHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INSTRUCCION_CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= INSTRUCCION_CIN FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= INSTRUCCION_COUT FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECREMENTO FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= INCREMENTO FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= TipoInt InicioPrograma ParentesisApertura ParentesisCierre LlaveApertura INSTRUCCIONES LlaveCierre 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

