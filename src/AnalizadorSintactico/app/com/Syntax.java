
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 19 10:35:46 CST 2025
//----------------------------------------------------

package AnalizadorSintactico.app.com;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 19 10:35:46 CST 2025
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\011\000\002\007" +
    "\004\000\002\007\003\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\005\000\002\003\004\000\002\004\005\000\002\004" +
    "\003\000\002\005\003\000\002\005\005\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\022\005\000\002" +
    "\014\004\000\002\015\004\000\002\010\005\000\002\011" +
    "\005\000\002\011\007\000\002\011\006\000\002\011\010" +
    "\000\002\017\004\000\002\017\005\000\002\012\011\000" +
    "\002\012\015\000\002\013\011\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\004\000\002\016\005\000\002" +
    "\016\003\000\002\016\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\004\004\005\001\002\000\004\002\167\001" +
    "\002\000\004\012\006\001\002\000\004\023\007\001\002" +
    "\000\004\024\010\001\002\000\004\025\011\001\002\000" +
    "\032\004\037\005\014\006\025\007\015\010\012\011\023" +
    "\013\016\015\022\062\021\063\030\064\031\070\032\001" +
    "\002\000\004\062\uffed\001\002\000\034\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\013\ufffe\015\ufffe\026" +
    "\ufffe\062\ufffe\063\ufffe\064\ufffe\070\ufffe\001\002\000\004" +
    "\062\uffec\001\002\000\004\062\uffea\001\002\000\004\014" +
    "\165\001\002\000\004\067\164\001\002\000\034\004\037" +
    "\005\014\006\025\007\015\010\012\011\023\013\016\015" +
    "\022\026\163\062\021\063\030\064\031\070\032\001\002" +
    "\000\010\032\161\050\157\051\160\001\002\000\004\016" +
    "\144\001\002\000\004\062\uffee\001\002\000\004\062\135" +
    "\001\002\000\004\062\uffeb\001\002\000\004\067\134\001" +
    "\002\000\004\067\133\001\002\000\004\023\125\001\002" +
    "\000\004\023\046\001\002\000\004\066\044\001\002\000" +
    "\034\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\013\ufff6\015\ufff6\026\ufff6\062\ufff6\063\ufff6\064\ufff6\070" +
    "\ufff6\001\002\000\004\067\043\001\002\000\004\067\042" +
    "\001\002\000\004\067\041\001\002\000\004\062\uffef\001" +
    "\002\000\034\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\013\ufff7\015\ufff7\026\ufff7\062\ufff7\063\ufff7\064" +
    "\ufff7\070\ufff7\001\002\000\034\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\013\ufff9\015\ufff9\026\ufff9\062" +
    "\ufff9\063\ufff9\064\ufff9\070\ufff9\001\002\000\034\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\013\ufffa\015" +
    "\ufffa\026\ufffa\062\ufffa\063\ufffa\064\ufffa\070\ufffa\001\002" +
    "\000\034\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\013\ufffb\015\ufffb\026\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\070\ufffb\001\002\000\004\067\045\001\002\000\034\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5" +
    "\015\ufff5\026\ufff5\062\ufff5\063\ufff5\064\ufff5\070\ufff5\001" +
    "\002\000\022\020\055\021\052\023\053\047\057\060\047" +
    "\061\051\062\054\066\056\001\002\000\044\016\uffc9\022" +
    "\uffc9\024\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\067\uffc9\001\002\000\044\016\uffce\022\uffce" +
    "\024\uffce\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\067\uffce\001\002\000\044\016\uffc8\022\uffc8\024" +
    "\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\067\uffc8\001\002\000\044\016\uffca\022\uffca\024\uffca" +
    "\031\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\067\uffca\001\002\000\022\020\055\021\052\023\053\047" +
    "\057\060\047\061\051\062\054\066\056\001\002\000\044" +
    "\016\uffcd\022\uffcd\024\uffcd\031\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\067\uffcd\001\002\000\044\016" +
    "\uffcb\022\uffcb\024\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\067\uffcb\001\002\000\044\016\uffcc" +
    "\022\uffcc\024\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\067\uffcc\001\002\000\022\020\055\021" +
    "\052\023\053\047\057\060\047\061\051\062\054\066\056" +
    "\001\002\000\034\024\071\033\061\034\070\035\073\036" +
    "\066\037\063\040\075\041\074\042\065\043\064\044\072" +
    "\045\062\046\067\001\002\000\022\020\055\021\052\023" +
    "\053\047\057\060\047\061\051\062\054\066\056\001\002" +
    "\000\022\020\055\021\052\023\053\047\057\060\047\061" +
    "\051\062\054\066\056\001\002\000\022\020\055\021\052" +
    "\023\053\047\057\060\047\061\051\062\054\066\056\001" +
    "\002\000\022\020\055\021\052\023\053\047\057\060\047" +
    "\061\051\062\054\066\056\001\002\000\022\020\055\021" +
    "\052\023\053\047\057\060\047\061\051\062\054\066\056" +
    "\001\002\000\022\020\055\021\052\023\053\047\057\060" +
    "\047\061\051\062\054\066\056\001\002\000\022\020\055" +
    "\021\052\023\053\047\057\060\047\061\051\062\054\066" +
    "\056\001\002\000\022\020\055\021\052\023\053\047\057" +
    "\060\047\061\051\062\054\066\056\001\002\000\004\025" +
    "\102\001\002\000\022\020\055\021\052\023\053\047\057" +
    "\060\047\061\051\062\054\066\056\001\002\000\022\020" +
    "\055\021\052\023\053\047\057\060\047\061\051\062\054" +
    "\066\056\001\002\000\022\020\055\021\052\023\053\047" +
    "\057\060\047\061\051\062\054\066\056\001\002\000\022" +
    "\020\055\021\052\023\053\047\057\060\047\061\051\062" +
    "\054\066\056\001\002\000\034\016\uffd6\022\uffd6\024\uffd6" +
    "\031\uffd6\033\061\034\070\035\073\036\066\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\067\uffd6\001\002\000\034\016\uffd7" +
    "\022\uffd7\024\uffd7\031\uffd7\033\061\034\070\035\073\036" +
    "\066\043\uffd7\044\uffd7\045\uffd7\046\uffd7\067\uffd7\001\002" +
    "\000\044\016\uffda\022\uffda\024\uffda\031\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\067\uffda\001\002\000" +
    "\040\016\uffd3\022\uffd3\024\uffd3\031\uffd3\033\061\034\070" +
    "\035\073\036\066\037\063\040\075\041\074\042\065\045" +
    "\uffd3\046\uffd3\067\uffd3\001\002\000\032\004\037\005\014" +
    "\006\025\007\015\010\012\011\023\013\016\015\022\062" +
    "\021\063\030\064\031\070\032\001\002\000\034\004\037" +
    "\005\014\006\025\007\015\010\012\011\023\013\016\015" +
    "\022\026\105\062\021\063\030\064\031\070\032\001\002" +
    "\000\034\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\013\uffff\015\uffff\026\uffff\062\uffff\063\uffff\064\uffff" +
    "\070\uffff\001\002\000\036\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\013\uffdf\015\uffdf\026\uffdf\062\uffdf" +
    "\063\uffdf\064\uffdf\065\106\070\uffdf\001\002\000\004\025" +
    "\107\001\002\000\032\004\037\005\014\006\025\007\015" +
    "\010\012\011\023\013\016\015\022\062\021\063\030\064" +
    "\031\070\032\001\002\000\034\004\037\005\014\006\025" +
    "\007\015\010\012\011\023\013\016\015\022\026\111\062" +
    "\021\063\030\064\031\070\032\001\002\000\034\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\013\uffde\015" +
    "\uffde\026\uffde\062\uffde\063\uffde\064\uffde\070\uffde\001\002" +
    "\000\044\016\uffdb\022\uffdb\024\uffdb\031\uffdb\033\uffdb\034" +
    "\uffdb\035\073\036\066\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\067\uffdb\001\002\000" +
    "\044\016\uffd1\022\uffd1\024\uffd1\031\uffd1\033\061\034\070" +
    "\035\073\036\066\037\063\040\075\041\074\042\065\043" +
    "\064\044\072\045\062\046\uffd1\067\uffd1\001\002\000\044" +
    "\016\uffd9\022\uffd9\024\uffd9\031\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\067\uffd9\001\002\000\034\016" +
    "\uffd5\022\uffd5\024\uffd5\031\uffd5\033\061\034\070\035\073" +
    "\036\066\043\uffd5\044\uffd5\045\uffd5\046\uffd5\067\uffd5\001" +
    "\002\000\040\016\uffd4\022\uffd4\024\uffd4\031\uffd4\033\061" +
    "\034\070\035\073\036\066\037\063\040\075\041\074\042" +
    "\065\045\uffd4\046\uffd4\067\uffd4\001\002\000\034\016\uffd8" +
    "\022\uffd8\024\uffd8\031\uffd8\033\061\034\070\035\073\036" +
    "\066\043\uffd8\044\uffd8\045\uffd8\046\uffd8\067\uffd8\001\002" +
    "\000\044\016\uffd2\022\uffd2\024\uffd2\031\uffd2\033\061\034" +
    "\070\035\073\036\066\037\063\040\075\041\074\042\065" +
    "\043\064\044\072\045\uffd2\046\uffd2\067\uffd2\001\002\000" +
    "\044\016\uffdc\022\uffdc\024\uffdc\031\uffdc\033\uffdc\034\uffdc" +
    "\035\073\036\066\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\067\uffdc\001\002\000\044" +
    "\016\uffd0\022\uffd0\024\uffd0\031\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\067\uffd0\001\002\000\034\024" +
    "\124\033\061\034\070\035\073\036\066\037\063\040\075" +
    "\041\074\042\065\043\064\044\072\045\062\046\067\001" +
    "\002\000\044\016\uffcf\022\uffcf\024\uffcf\031\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\067\uffcf\001\002" +
    "\000\022\020\055\021\052\023\053\047\057\060\047\061" +
    "\051\062\054\066\056\001\002\000\034\024\127\033\061" +
    "\034\070\035\073\036\066\037\063\040\075\041\074\042" +
    "\065\043\064\044\072\045\062\046\067\001\002\000\004" +
    "\025\130\001\002\000\032\004\037\005\014\006\025\007" +
    "\015\010\012\011\023\013\016\015\022\062\021\063\030" +
    "\064\031\070\032\001\002\000\034\004\037\005\014\006" +
    "\025\007\015\010\012\011\023\013\016\015\022\026\132" +
    "\062\021\063\030\064\031\070\032\001\002\000\034\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd" +
    "\015\uffdd\026\uffdd\062\uffdd\063\uffdd\064\uffdd\070\uffdd\001" +
    "\002\000\034\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\013\ufffc\015\ufffc\026\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\070\ufffc\001\002\000\034\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\013\ufff8\015\ufff8\026\ufff8\062" +
    "\ufff8\063\ufff8\064\ufff8\070\ufff8\001\002\000\010\031\ufff1" +
    "\032\142\067\ufff1\001\002\000\006\031\ufff2\067\ufff2\001" +
    "\002\000\006\031\140\067\ufff4\001\002\000\004\062\135" +
    "\001\002\000\006\031\ufff3\067\ufff3\001\002\000\022\020" +
    "\055\021\052\023\053\047\057\060\047\061\051\062\054" +
    "\066\056\001\002\000\036\031\ufff0\033\061\034\070\035" +
    "\073\036\066\037\063\040\075\041\074\042\065\043\064" +
    "\044\072\045\062\046\067\067\ufff0\001\002\000\022\020" +
    "\055\021\052\023\053\047\057\060\047\061\051\062\054" +
    "\066\056\001\002\000\040\016\150\022\147\033\061\034" +
    "\070\035\073\036\066\037\063\040\075\041\074\042\065" +
    "\043\064\044\072\045\062\046\067\067\uffe5\001\002\000" +
    "\010\016\154\022\153\067\uffe3\001\002\000\022\020\055" +
    "\021\052\023\053\047\057\060\047\061\051\062\054\066" +
    "\056\001\002\000\004\017\151\001\002\000\004\067\uffe4" +
    "\001\002\000\040\016\uffe1\022\uffe1\033\061\034\070\035" +
    "\073\036\066\037\063\040\075\041\074\042\065\043\064" +
    "\044\072\045\062\046\067\067\uffe1\001\002\000\022\020" +
    "\055\021\052\023\053\047\057\060\047\061\051\062\054" +
    "\066\056\001\002\000\004\017\155\001\002\000\004\067" +
    "\uffe2\001\002\000\040\016\uffe0\022\uffe0\033\061\034\070" +
    "\035\073\036\066\037\063\040\075\041\074\042\065\043" +
    "\064\044\072\045\062\046\067\067\uffe0\001\002\000\004" +
    "\067\uffe8\001\002\000\004\067\uffe7\001\002\000\022\020" +
    "\055\021\052\023\053\047\057\060\047\061\051\062\054" +
    "\066\056\001\002\000\034\033\061\034\070\035\073\036" +
    "\066\037\063\040\075\041\074\042\065\043\064\044\072" +
    "\045\062\046\067\067\uffe9\001\002\000\004\002\000\001" +
    "\002\000\034\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\013\ufffd\015\ufffd\026\ufffd\062\ufffd\063\ufffd\064" +
    "\ufffd\070\ufffd\001\002\000\004\062\166\001\002\000\004" +
    "\067\uffe6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\016\006\012\007\017\010\025\011" +
    "\035\012\037\013\032\014\033\015\034\020\023\022\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\016\006\103\010\025\011\035\012\037\013" +
    "\032\014\033\015\034\020\023\022\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\136\005\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\057\021" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\122\021\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\121\021\047\001\001\000\002\001\001\000" +
    "\006\016\120\021\047\001\001\000\006\016\117\021\047" +
    "\001\001\000\006\016\116\021\047\001\001\000\006\016" +
    "\115\021\047\001\001\000\006\016\114\021\047\001\001" +
    "\000\006\016\113\021\047\001\001\000\006\016\112\021" +
    "\047\001\001\000\006\016\111\021\047\001\001\000\002" +
    "\001\001\000\006\016\100\021\047\001\001\000\006\016" +
    "\077\021\047\001\001\000\006\016\076\021\047\001\001" +
    "\000\006\016\075\021\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\016\006\012\007\102\010\025\011\035\012\037\013" +
    "\032\014\033\015\034\020\023\022\026\001\001\000\026" +
    "\003\016\006\103\010\025\011\035\012\037\013\032\014" +
    "\033\015\034\020\023\022\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\016\006" +
    "\012\007\107\010\025\011\035\012\037\013\032\014\033" +
    "\015\034\020\023\022\026\001\001\000\026\003\016\006" +
    "\103\010\025\011\035\012\037\013\032\014\033\015\034" +
    "\020\023\022\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\125\021\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\016\006\012\007\130" +
    "\010\025\011\035\012\037\013\032\014\033\015\034\020" +
    "\023\022\026\001\001\000\026\003\016\006\103\010\025" +
    "\011\035\012\037\013\032\014\033\015\034\020\023\022" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\140\001\001\000\002\001\001\000\006" +
    "\016\142\021\047\001\001\000\002\001\001\000\006\016" +
    "\144\021\047\001\001\000\004\017\145\001\001\000\002" +
    "\001\001\000\006\016\151\021\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\155" +
    "\021\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\161\021\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LITERAL ::= OperadorFalse 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LITERAL ::= OperadorTrue 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LITERAL ::= CharText 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LITERAL ::= CadenaText 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LITERAL ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= ParentesisApertura EXPRESION ParentesisCierre 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= OperadorLNot EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION OperadorLOr EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION OperadorLAnd EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION OperadorDiferente EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION OperadorIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION OperadorMenorIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION OperadorMenor EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION OperadorMayorIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION OperadorMayor EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION OperadorDivision EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION OperadorMultiplicacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION OperadorResta EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION OperadorSuma EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION_WHILE ::= InstruccionWhile ParentesisApertura EXPRESION ParentesisCierre LlaveApertura INSTRUCCIONES LlaveCierre 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_WHILE",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION_CONDICIONAL ::= InstruccionIf ParentesisApertura EXPRESION ParentesisCierre LlaveApertura INSTRUCCIONES LlaveCierre InstruccionElse LlaveApertura INSTRUCCIONES LlaveCierre 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CONDICIONAL",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCION_CONDICIONAL ::= InstruccionIf ParentesisApertura EXPRESION ParentesisCierre LlaveApertura INSTRUCCIONES LlaveCierre 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CONDICIONAL",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONCATENAR ::= CONCATENAR ConcatenacionText EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONCATENAR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONCATENAR ::= ConcatenacionText EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONCATENAR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION_COUT ::= SalidaInfo OperadorSalida EXPRESION CONCATENAR OperadorSalida SaltoLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_COUT",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION_COUT ::= SalidaInfo OperadorSalida EXPRESION CONCATENAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_COUT",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION_COUT ::= SalidaInfo OperadorSalida EXPRESION OperadorSalida SaltoLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_COUT",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION_COUT ::= SalidaInfo OperadorSalida EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_COUT",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION_CIN ::= EntradaInfo OperadorEntrada Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CIN",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECREMENTO ::= Identificador OperadorDecremento 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECREMENTO",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INCREMENTO ::= Identificador OperadorIncremento 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION ::= Identificador OperadorAsignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= TipoBoolean 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= TipoChar 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= TipoString 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= TipoDouble 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= TipoFloat 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= TipoInt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_SIMPLE ::= Identificador OperadorAsignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION_SIMPLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA_DECLARACIONES ::= DECLARACION_SIMPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_DECLARACIONES ::= LISTA_DECLARACIONES Separador DECLARACION_SIMPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= TIPO LISTA_DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= FinPrograma Numero FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= INSTRUCCION_WHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INSTRUCCION_CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= INSTRUCCION_CIN FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= INSTRUCCION_COUT FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECREMENTO FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= INCREMENTO FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION FinLinea 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= TipoInt InicioPrograma ParentesisApertura ParentesisCierre LlaveApertura INSTRUCCIONES LlaveCierre 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

