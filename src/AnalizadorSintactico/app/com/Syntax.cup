package AnalizadorSintactico.app.com;
import java_cup.runtime.Symbol;

parser code
{: 
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
:};

terminal TipoInt, TipoString, TipoChar, TipoBoolean, TipoDouble, TipoFloat;
terminal InicioPrograma, EntradaInfo, OperadorEntrada, SalidaInfo, OperadorSalida, SaltoLinea;
terminal CadenaText, CharText, ConcatenacionText;
terminal ParentesisApertura, ParentesisCierre, LlaveApertura, LlaveCierre;
terminal CorcheteApertura, CorcheteCierre, Separador, OperadorAsignacion;
terminal OperadorSuma, OperadorResta, OperadorMultiplicacion, OperadorDivision;
terminal OperadorMayor, OperadorMenor, OperadorMayorIgual, OperadorMenorIgual, OperadorIgual, OperadorDiferente;
terminal OperadorLAnd, OperadorLOr, OperadorLNot;
terminal OperadorIncremento, OperadorDecremento;
terminal OperadorASuma, OperadorAResta, OperadorAMultiplicacion, OperadorADivision, OperadorAModulo;
terminal OperadorBooleano, OperadorTrue, OperadorFalse;
terminal Identificador;
terminal InstruccionWhile;
terminal InstruccionIf, InstruccionElse;
terminal Numero, FinLinea, FinPrograma;
terminal ERROR;

non terminal PROGRAMA, DECLARACION, LISTA_DECLARACIONES, DECLARACION_SIMPLE, INSTRUCCION, INSTRUCCIONES;
non terminal INSTRUCCION_CIN, INSTRUCCION_COUT, INSTRUCCION_CONDICIONAL, INSTRUCCION_WHILE;
non terminal INCREMENTO, DECREMENTO, EXPRESION, CONCATENAR, TIPO, LITERAL, ASIGNACION;

precedence left OperadorLOr;
precedence left OperadorLAnd;
precedence nonassoc OperadorIgual, OperadorDiferente;
precedence nonassoc OperadorMayor, OperadorMenor, OperadorMayorIgual, OperadorMenorIgual;
precedence left OperadorSuma, OperadorResta;
precedence left OperadorMultiplicacion, OperadorDivision;
precedence right OperadorLNot; // negación lógica (unario)

start with PROGRAMA;

PROGRAMA ::= TipoInt InicioPrograma ParentesisApertura ParentesisCierre LlaveApertura INSTRUCCIONES LlaveCierre;

INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION
                | INSTRUCCION;

INSTRUCCION ::= DECLARACION FinLinea
              | ASIGNACION FinLinea
              | INCREMENTO FinLinea
              | DECREMENTO FinLinea
              | INSTRUCCION_COUT FinLinea
              | INSTRUCCION_CIN FinLinea
              | INSTRUCCION_CONDICIONAL
              | INSTRUCCION_WHILE
              | FinPrograma Numero FinLinea;

DECLARACION ::= TIPO LISTA_DECLARACIONES;

LISTA_DECLARACIONES ::= LISTA_DECLARACIONES Separador DECLARACION_SIMPLE
                      | DECLARACION_SIMPLE;

DECLARACION_SIMPLE ::= Identificador
                     | Identificador OperadorAsignacion EXPRESION;

TIPO ::= TipoInt
       | TipoFloat
       | TipoDouble
       | TipoString
       | TipoChar
       | TipoBoolean;

ASIGNACION ::= Identificador OperadorAsignacion EXPRESION;

INCREMENTO ::= Identificador OperadorIncremento;

DECREMENTO ::= Identificador OperadorDecremento;

INSTRUCCION_CIN ::= EntradaInfo OperadorEntrada Identificador;

INSTRUCCION_COUT ::= SalidaInfo OperadorSalida EXPRESION
                   | SalidaInfo OperadorSalida EXPRESION OperadorSalida SaltoLinea
                   | SalidaInfo OperadorSalida EXPRESION CONCATENAR
                   | SalidaInfo OperadorSalida EXPRESION CONCATENAR OperadorSalida SaltoLinea;

CONCATENAR ::= ConcatenacionText EXPRESION 
             | CONCATENAR ConcatenacionText EXPRESION; 

INSTRUCCION_CONDICIONAL ::= InstruccionIf ParentesisApertura EXPRESION ParentesisCierre LlaveApertura INSTRUCCIONES LlaveCierre
                          | InstruccionIf ParentesisApertura EXPRESION ParentesisCierre LlaveApertura INSTRUCCIONES LlaveCierre InstruccionElse LlaveApertura INSTRUCCIONES LlaveCierre;

INSTRUCCION_WHILE ::= InstruccionWhile ParentesisApertura EXPRESION ParentesisCierre LlaveApertura INSTRUCCIONES LlaveCierre;
                    
EXPRESION ::= EXPRESION OperadorSuma EXPRESION
            | EXPRESION OperadorResta EXPRESION
            | EXPRESION OperadorMultiplicacion EXPRESION
            | EXPRESION OperadorDivision EXPRESION
            | EXPRESION OperadorMayor EXPRESION
            | EXPRESION OperadorMayorIgual EXPRESION
            | EXPRESION OperadorMenor EXPRESION
            | EXPRESION OperadorMenorIgual EXPRESION
            | EXPRESION OperadorIgual EXPRESION
            | EXPRESION OperadorDiferente EXPRESION
            | EXPRESION OperadorLAnd EXPRESION
            | EXPRESION OperadorLOr EXPRESION
            | OperadorLNot EXPRESION
            | ParentesisApertura EXPRESION ParentesisCierre
            | LITERAL
            | Identificador;

LITERAL ::= Numero
          | CadenaText
          | CharText
          | OperadorTrue
          | OperadorFalse;
