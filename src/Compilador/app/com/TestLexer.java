/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Compilador.app.com;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.Reader;
import AnalizadorLexico.app.com.Lexer;
import java.awt.Dimension;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author capis
 */
public class TestLexer extends javax.swing.JFrame {

    /**
     * Creates new form TestLexer
     */
    public TestLexer() {
        initComponents();
        this.setTitle("Test Análizador Sintáctico");
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setSize(new Dimension(690, 350));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTxtCodigoFuente = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jBtnAnalizar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTxtValidacionTokens = new javax.swing.JTextArea();
        jBtnLimpiar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(65, 105, 225));

        jTxtCodigoFuente.setColumns(20);
        jTxtCodigoFuente.setRows(5);
        jScrollPane1.setViewportView(jTxtCodigoFuente);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Código Fuente:");

        jBtnAnalizar.setBackground(new java.awt.Color(144, 238, 144));
        jBtnAnalizar.setText("Analizar");
        jBtnAnalizar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBtnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAnalizarActionPerformed(evt);
            }
        });

        jTxtValidacionTokens.setColumns(20);
        jTxtValidacionTokens.setRows(5);
        jScrollPane2.setViewportView(jTxtValidacionTokens);

        jBtnLimpiar.setBackground(new java.awt.Color(255, 153, 0));
        jBtnLimpiar.setText("Limpiar");
        jBtnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnLimpiarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Válidación de Tokens:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBtnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                            .addComponent(jBtnAnalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBtnAnalizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBtnLimpiar))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(77, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 690, 300));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAnalizarActionPerformed
        File file = new File("Prueba.txt");

// Guardar el contenido del JTextArea en un archivo
        try (PrintWriter escribir = new PrintWriter(file)) {
            escribir.print(this.jTxtCodigoFuente.getText());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TestLexer.class.getName()).log(Level.SEVERE, null, ex);
            return; // No continuamos si no pudimos escribir el archivo
        }

// Analizar el contenido del archivo
        try (Reader lector = new BufferedReader(new FileReader(file))) {
            Lexer lexer = new Lexer(lector);
            StringBuilder resultado = new StringBuilder();

            Tokens tokens;
            while ((tokens = lexer.yylex()) != null) {
                System.out.println("Token: " + tokens + ", lexema: " + lexer.lexeme); // debug
                switch (tokens) {
                    case ERROR ->
                        resultado.append("Símbolo no definido: ").append(lexer.lexeme).append("\n");

                    case TipoDato ->
                        resultado.append(lexer.lexeme).append(" --> Es un " + tokens + "\n");

                    case InicioPrograma ->
                        resultado.append(lexer.lexeme).append(" --> Es un " + tokens + "\n");

                    case EntradaInfo ->
                        resultado.append(lexer.lexeme).append(" --> Es una " + tokens + "\n");

                    case OperadorEntrada ->
                        resultado.append(lexer.lexeme).append(" --> Es un " + tokens + "\n");

                    case SalidaInfo ->
                        resultado.append(lexer.lexeme).append(" --> Es una " + tokens + "\n");

                    case OperadorSalida ->
                        resultado.append(lexer.lexeme).append(" --> Es un " + tokens + "\n");

                    case ParentesisApertura ->
                        resultado.append(lexer.lexeme).append(" --> Es un " + tokens + "\n");

                    case ParentesisCierre ->
                        resultado.append(lexer.lexeme).append(" --> Es un " + tokens + "\n");

                    case LlaveApertura ->
                        resultado.append(lexer.lexeme).append(" --> Es una " + tokens + "\n");

                    case LlaveCierre ->
                        resultado.append(lexer.lexeme).append(" --> Es una " + tokens + "\n");

                    case OperadorAsignacion ->
                        resultado.append(lexer.lexeme).append(" --> Es un " + tokens + "\n");

                    case OperadorAritmetico ->
                        resultado.append(lexer.lexeme).append(" --> Es un " + tokens + "\n");

                    case OperadorRelacional ->
                        resultado.append(lexer.lexeme).append(" --> Es un " + tokens + "\n");

                    case Identificador ->
                        resultado.append(lexer.lexeme).append(" --> Es un " + tokens + "\n");

                    case InstruccionBucle ->
                        resultado.append(lexer.lexeme).append(" --> Es una " + tokens + "\n");

                    case InstruccionCondicional ->
                        resultado.append(lexer.lexeme).append(" --> Es una " + tokens + "\n");

                    case Numero ->
                        resultado.append(lexer.lexeme).append(" --> Es un " + tokens + "\n");

                    case FinLinea ->
                        resultado.append(lexer.lexeme).append(" --> Es un " + tokens + "\n");

                    case FinPrograma ->
                        resultado.append(lexer.lexeme).append(" --> Es un " + tokens + "\n");
                }
            }

            resultado.append("FIN DE IDENTIFICACIÓN DE TOKENS");
            this.jTxtValidacionTokens.setText(resultado.toString());

        } catch (FileNotFoundException ex) {
            Logger.getLogger(TestLexer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestLexer.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jBtnAnalizarActionPerformed

    private void jBtnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnLimpiarActionPerformed
        this.jTxtCodigoFuente.setText(null);
        this.jTxtValidacionTokens.setText(null);        
    }//GEN-LAST:event_jBtnLimpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestLexer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestLexer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestLexer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestLexer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestLexer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAnalizar;
    private javax.swing.JButton jBtnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTxtCodigoFuente;
    private javax.swing.JTextArea jTxtValidacionTokens;
    // End of variables declaration//GEN-END:variables
}
