/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Compilador.app.com;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.Reader;
import AnalizadorLexico.app.com.Lexer;
import AnalizadorSintactico.app.com.Syntax;
import java.awt.Color;
import java.awt.Dimension;
import java.io.IOException;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author capis
 */
public class TestLexer extends javax.swing.JFrame {

    int numToken, contador;

    /**
     * Creates new form TestLexer
     */
    public TestLexer() {
        initComponents();
        this.setTitle("Fases de un Compilador");
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setSize(new Dimension(820, 430));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTxtCodigoFuente = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jBtnAnalizar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTxtValidacionTokens = new javax.swing.JTextArea();
        jBtnLimpiar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jBtnSintactico = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTxtValidacionSintactico = new javax.swing.JTextArea();
        jBtnCargarCodigo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(65, 105, 225));

        jTxtCodigoFuente.setColumns(20);
        jTxtCodigoFuente.setRows(5);
        jScrollPane1.setViewportView(jTxtCodigoFuente);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Código Fuente:");

        jBtnAnalizar.setBackground(new java.awt.Color(144, 238, 144));
        jBtnAnalizar.setForeground(new java.awt.Color(0, 0, 0));
        jBtnAnalizar.setText("Analizador Léxico");
        jBtnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAnalizarActionPerformed(evt);
            }
        });

        jTxtValidacionTokens.setEditable(false);
        jTxtValidacionTokens.setColumns(20);
        jTxtValidacionTokens.setRows(5);
        jScrollPane2.setViewportView(jTxtValidacionTokens);

        jBtnLimpiar.setBackground(new java.awt.Color(255, 153, 0));
        jBtnLimpiar.setForeground(new java.awt.Color(0, 0, 0));
        jBtnLimpiar.setText("Limpiar");
        jBtnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnLimpiarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Válidación de Tokens:");

        jBtnSintactico.setBackground(new java.awt.Color(255, 204, 51));
        jBtnSintactico.setForeground(new java.awt.Color(0, 0, 0));
        jBtnSintactico.setText("Analizador Sintáctico");
        jBtnSintactico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSintacticoActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Válidación Sintáctico:");

        jTxtValidacionSintactico.setEditable(false);
        jTxtValidacionSintactico.setColumns(20);
        jTxtValidacionSintactico.setRows(5);
        jScrollPane3.setViewportView(jTxtValidacionSintactico);

        jBtnCargarCodigo.setBackground(new java.awt.Color(255, 51, 51));
        jBtnCargarCodigo.setForeground(new java.awt.Color(0, 0, 0));
        jBtnCargarCodigo.setText("Cargar Código Fuente");
        jBtnCargarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCargarCodigoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jBtnSintactico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jBtnAnalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jBtnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jBtnCargarCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBtnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jBtnSintactico, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnCargarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 430));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAnalizarActionPerformed
        File file = new File("Prueba.txt");

// Guardar el contenido del JTextArea en un archivo
        try (PrintWriter escribir = new PrintWriter(file)) {
            escribir.print(this.jTxtCodigoFuente.getText());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TestLexer.class.getName()).log(Level.SEVERE, null, ex);
            return; // No continuamos si no pudimos escribir el archivo
        }

// Analizar el contenido del archivo
        try (Reader lector = new BufferedReader(new FileReader(file))) {
            numToken = 1;
            contador = 1;
            Lexer lexer = new Lexer(lector);
            StringBuilder resultado = new StringBuilder("Linea " + contador + "\n");

            //resultado.append("Linea:").append(numLinea).append("\t\tSimbolo\n");
            Tokens tokens;
            while ((tokens = lexer.yylex()) != null) {
                // System.out.println("Token No." + numToken + " Patron: " + tokens + ", lexema: " + lexer.lexeme); // debug
                switch (tokens) {
                    case Linea -> {
                        contador++;
                        resultado.append("Linea ").append(contador).append("\n");
                    }
                    case ERROR ->{
                        resultado.append("No.").append(numToken).append(" Símbolo no definido: ").append(lexer.lexeme).append("\n");
                        numToken++;
                    }
                    case TipoDato ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case InicioPrograma ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case EntradaInfo ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es una ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorEntrada ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case SalidaInfo ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es una ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorSalida ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case SaltoLinea ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case CharText ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case CadenaText ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case ConcatenacionText ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case ParentesisApertura ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case ParentesisCierre ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case LlaveApertura ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es una ").append(tokens).append("\n");
                        numToken++;
                    }
                    case LlaveCierre ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es una ").append(tokens).append("\n");
                        numToken++;
                    }
                    case CorcheteApertura ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case CorcheteCierre ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorAsignacion ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorAritmetico ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorAtribucion ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorRelacional ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorLogico ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorBooleano ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorIncremento ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorDecremento ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case Identificador ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case Separador ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case InstruccionBucle ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es una ").append(tokens).append("\n");
                        numToken++;
                    }
                    case InstruccionCondicional ->{
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es una ").append(tokens).append("\n");
                        numToken++;
                    }
                    case Numero -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case FinLinea -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }

                    case FinPrograma -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                }
                
            }

            resultado.append("FIN DE IDENTIFICACIÓN DE TOKENS");
            this.jTxtValidacionTokens.setText(resultado.toString());

        } catch (FileNotFoundException ex) {
            Logger.getLogger(TestLexer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestLexer.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jBtnAnalizarActionPerformed

    private void jBtnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnLimpiarActionPerformed
        this.jTxtCodigoFuente.setText(null);
        this.jTxtValidacionTokens.setText(null);
        this.jTxtValidacionSintactico.setText(null);
        this.jTxtCodigoFuente.setEditable(true);
    }//GEN-LAST:event_jBtnLimpiarActionPerformed

    private void jBtnSintacticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSintacticoActionPerformed
        String ST = jTxtCodigoFuente.getText();
        Syntax s = new Syntax(new AnalizadorSintactico.app.com.LexerCup(new StringReader(ST)));

        try {
            s.parse();
            this.jTxtValidacionSintactico.setText("Análisis realizado correctamente");
            this.jTxtValidacionSintactico.setForeground(new Color(25, 111, 61));
        } catch (Exception ex) {
            Symbol sym = s.getS();
            jTxtValidacionSintactico.setText("Error de sintaxis. En la linea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\"");
            jTxtValidacionSintactico.setForeground(Color.red);
        }
    }//GEN-LAST:event_jBtnSintacticoActionPerformed

    private void jBtnCargarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCargarCodigoActionPerformed
        JFileChooser chooser = new JFileChooser(FileSystemView.getFileSystemView());
        int opcion = chooser.showOpenDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            File archivo = chooser.getSelectedFile();
            this.jTxtCodigoFuente.setEditable(false);
            try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
                this.jTxtCodigoFuente.setText(""); // Limpiar antes de mostrar nuevo contenido
                String linea;
                while ((linea = br.readLine()) != null) {
                    this.jTxtCodigoFuente.append(linea + "\n");
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo:\n" + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jBtnCargarCodigoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestLexer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestLexer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestLexer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestLexer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestLexer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAnalizar;
    private javax.swing.JButton jBtnCargarCodigo;
    private javax.swing.JButton jBtnLimpiar;
    private javax.swing.JButton jBtnSintactico;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTxtCodigoFuente;
    private javax.swing.JTextArea jTxtValidacionSintactico;
    private javax.swing.JTextArea jTxtValidacionTokens;
    // End of variables declaration//GEN-END:variables
}
