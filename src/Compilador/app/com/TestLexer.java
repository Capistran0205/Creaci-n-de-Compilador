/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Compilador.app.com;

import AAS.app.com.ArbolJGrapht;
import AAS.app.com.Nodo;
import AAS.app.com.VisualizadorArbol;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.Reader;
import AnalizadorLexico.app.com.Lexer;
import AnalizadorSintactico.app.com.Syntax;
import AnalizadorSintactico.app.com.LexerCup;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ItemEvent;
import java.io.IOException;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

/**
 *
 * @author capis
 */
public class TestLexer extends javax.swing.JFrame {

    int numToken, contador;
    Nodo raiz;
    ArbolJGrapht arbol;
    VisualizadorArbol visualizador;
    // Establecer estilos
    final StyleContext contenido = StyleContext.getDefaultStyleContext();

    // Colores
    final AttributeSet dataTypes = contenido.addAttribute(contenido.getEmptySet(), StyleConstants.Foreground, new Color(181, 0, 26));
    final AttributeSet reserved = contenido.addAttribute(contenido.getEmptySet(), StyleConstants.Foreground, new Color(127, 0, 255));
    final AttributeSet numbers = contenido.addAttribute(contenido.getEmptySet(), StyleConstants.Foreground, new Color(212, 175, 55));
    final AttributeSet strings = contenido.addAttribute(contenido.getEmptySet(), StyleConstants.Foreground, new Color(0, 143, 57));
    final AttributeSet character = contenido.addAttribute(contenido.getEmptySet(), StyleConstants.Foreground, new Color(65, 105, 225));
    final AttributeSet normal = contenido.addAttribute(contenido.getEmptySet(), StyleConstants.Foreground, new Color(0, 0, 0));

    /**
     * Creates new form TestLexer
     */
    public TestLexer() {
        initComponents();
        this.setTitle("Fases de un Compilador");
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setSize(new Dimension(820, 440));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.applyColors();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jBtnAnalizadorLexico = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTxtValidacionTokens = new javax.swing.JTextArea();
        jBtnLimpiar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jBtnSintactico = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTxtValidacionSintactico = new javax.swing.JTextArea();
        jBtnCargarCodigo = new javax.swing.JButton();
        jChCodigoFuente = new javax.swing.JCheckBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTxtCodigoFuente = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(65, 105, 225));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Código Fuente:");

        jBtnAnalizadorLexico.setBackground(new java.awt.Color(144, 238, 144));
        jBtnAnalizadorLexico.setForeground(new java.awt.Color(0, 0, 0));
        jBtnAnalizadorLexico.setText("Analizador Léxico");
        jBtnAnalizadorLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAnalizadorLexicoActionPerformed(evt);
            }
        });

        jTxtValidacionTokens.setEditable(false);
        jTxtValidacionTokens.setColumns(20);
        jTxtValidacionTokens.setRows(5);
        jScrollPane2.setViewportView(jTxtValidacionTokens);

        jBtnLimpiar.setBackground(new java.awt.Color(255, 153, 0));
        jBtnLimpiar.setForeground(new java.awt.Color(0, 0, 0));
        jBtnLimpiar.setText("Limpiar");
        jBtnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnLimpiarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Válidación de Tokens:");

        jBtnSintactico.setBackground(new java.awt.Color(255, 204, 51));
        jBtnSintactico.setForeground(new java.awt.Color(0, 0, 0));
        jBtnSintactico.setText("Analizador Sintáctico");
        jBtnSintactico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSintacticoActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Válidación Sintáctico:");

        jTxtValidacionSintactico.setEditable(false);
        jTxtValidacionSintactico.setColumns(20);
        jTxtValidacionSintactico.setFont(new java.awt.Font("Lucida Console", 0, 12)); // NOI18N
        jTxtValidacionSintactico.setRows(5);
        jScrollPane3.setViewportView(jTxtValidacionSintactico);

        jBtnCargarCodigo.setBackground(new java.awt.Color(255, 51, 51));
        jBtnCargarCodigo.setForeground(new java.awt.Color(0, 0, 0));
        jBtnCargarCodigo.setText("Cargar Código Fuente");
        jBtnCargarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCargarCodigoActionPerformed(evt);
            }
        });

        jChCodigoFuente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jChCodigoFuente.setText("Habilitar Código Fuente");
        jChCodigoFuente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jChCodigoFuenteItemStateChanged(evt);
            }
        });

        jScrollPane4.setViewportView(jTxtCodigoFuente);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jChCodigoFuente)
                        .addGap(59, 59, 59)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jBtnSintactico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jBtnAnalizadorLexico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jBtnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jBtnCargarCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBtnAnalizadorLexico, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jBtnSintactico, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnCargarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jChCodigoFuente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 410));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnAnalizadorLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAnalizadorLexicoActionPerformed
        File file = new File("Prueba.txt");

// Guardar el contenido del JTextArea en un archivo
        try (PrintWriter escribir = new PrintWriter(file)) {
            escribir.print(this.jTxtCodigoFuente.getText());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TestLexer.class.getName()).log(Level.SEVERE, null, ex);
            return; // No continuamos si no pudimos escribir el archivo
        }

// Analizar el contenido del archivo
        try (Reader lector = new BufferedReader(new FileReader(file))) {
            numToken = 1;
            contador = 1;
            Lexer lexer = new Lexer(lector);
            StringBuilder resultado = new StringBuilder("Linea " + contador + "\n");

            //resultado.append("Linea:").append(numLinea).append("\t\tSimbolo\n");
            Tokens tokens;
            while ((tokens = lexer.yylex()) != null) {
                switch (tokens) {
                    case Linea -> {
                        contador++;
                        resultado.append("Linea ").append(contador).append("\n");
                    }
                    case ERROR -> {
                        resultado.append("No.").append(numToken).append(" Error, Símbolo no definido: ").append(lexer.lexeme).append("\n");
                        numToken++;
                    }
                    case TipoDato -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case InicioPrograma -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case EntradaInfo -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es una ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorEntrada -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case SalidaInfo -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es una ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorSalida -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case SaltoLinea -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case CharText -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case CadenaText -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case ConcatenacionText -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case ParentesisApertura -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case ParentesisCierre -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case LlaveApertura -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es una ").append(tokens).append("\n");
                        numToken++;
                    }
                    case LlaveCierre -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es una ").append(tokens).append("\n");
                        numToken++;
                    }
                    case CorcheteApertura -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case CorcheteCierre -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorAsignacion -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorAritmetico -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorAtribucion -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorRelacional -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorLogico -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorBooleano -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorIncremento -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case OperadorDecremento -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case Identificador -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case Separador -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case InstruccionBucle -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es una ").append(tokens).append("\n");
                        numToken++;
                    }
                    case InstruccionCondicional -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es una ").append(tokens).append("\n");
                        numToken++;
                    }
                    case Numero -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                    case FinLinea -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }

                    case FinPrograma -> {
                        resultado.append("No.").append(numToken).append(" ").append(lexer.lexeme).append(" ➔ Es un ").append(tokens).append("\n");
                        numToken++;
                    }
                }

            }

            resultado.append("FIN DE IDENTIFICACIÓN DE TOKENS");
            this.jTxtValidacionTokens.setText(resultado.toString());

        } catch (FileNotFoundException ex) {
            Logger.getLogger(TestLexer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestLexer.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jBtnAnalizadorLexicoActionPerformed

    private void jBtnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnLimpiarActionPerformed
        this.jTxtCodigoFuente.setText(null);
        this.jTxtValidacionTokens.setText(null);
        this.jTxtValidacionSintactico.setText(null);
        this.jTxtCodigoFuente.setEditable(true);
        raiz = null;
    }//GEN-LAST:event_jBtnLimpiarActionPerformed

    private void jBtnSintacticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSintacticoActionPerformed
        try {
            // Leer el archivo con try-with-resources
            File file = new File("Prueba.txt"); // Puedes cambiar esta ruta si lo deseas

            // Guardar el contenido del JTextArea en un archivo
            try (PrintWriter escribir = new PrintWriter(file)) {
                escribir.print(this.jTxtCodigoFuente.getText());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TestLexer.class.getName()).log(Level.SEVERE, null, ex);
                return; // No continuamos si no pudimos escribir el archivo
            }

            StringBuilder contenido = new StringBuilder();
            // Lecutra del archivo para pasarlo al parser
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                String linea;
                while ((linea = br.readLine()) != null) {
                    contenido.append(linea).append("\n"); // Preservamos saltos de línea
                }
            }
            String ST = contenido.toString();
            // Instancia de la clase Syntax para el análisis sintáctico
            Syntax s = new Syntax(new LexerCup(new StringReader(ST)));

            try {
                // Activación del análisis sintáctico
                s.parse();
//                raiz = (Nodo) s.parse().value;
//                raiz.printArbol(raiz);
//                arbol = new ArbolJGrapht();
//                arbol.construirGrafo(raiz);
//                visualizador = new VisualizadorArbol(arbol.getGrafo());
//                visualizador.mostrar();
                this.jTxtValidacionSintactico.setText("Análisis realizado correctamente");
                this.jTxtValidacionSintactico.setForeground(new Color(8, 101, 34));
            } catch (Exception ex) {
                Symbol sym = s.getS();
                this.jTxtValidacionSintactico.setText("Error de sintaxis. En la linea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\"");
                this.jTxtValidacionSintactico.setForeground(Color.red);
            }

        } catch (IOException e) {
            // Manejo de errores si no se puede leer el archivo
            this.jTxtValidacionSintactico.setText("Error al leer el archivo: " + e.getMessage());
            this.jTxtValidacionSintactico.setForeground(Color.red);
        }

    }//GEN-LAST:event_jBtnSintacticoActionPerformed

    private void jBtnCargarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCargarCodigoActionPerformed
        // Objeto JFileChooser para seleccionar y abrir el código fuente
        JFileChooser chooser = new JFileChooser(FileSystemView.getFileSystemView());
        int opcion = chooser.showOpenDialog(this);

        if (opcion == JFileChooser.APPROVE_OPTION) {
            File archivo = chooser.getSelectedFile();
            this.jTxtCodigoFuente.setEditable(false);

            StyledDocument doc = jTxtCodigoFuente.getStyledDocument();
            try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
                doc.remove(0, doc.getLength()); // Limpiar el contenido anterior
                String linea;
                while ((linea = br.readLine()) != null) {
                    doc.insertString(doc.getLength(), linea + "\n", null); // Agregar cada línea al final
                }
                applyColors();
            } catch (IOException | BadLocationException ex) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo:\n" + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jBtnCargarCodigoActionPerformed

    private void jChCodigoFuenteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jChCodigoFuenteItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED)
            this.jTxtCodigoFuente.setEditable(true);
        else
            this.jTxtCodigoFuente.setEditable(false);
    }//GEN-LAST:event_jChCodigoFuenteItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestLexer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestLexer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestLexer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestLexer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestLexer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAnalizadorLexico;
    private javax.swing.JButton jBtnCargarCodigo;
    private javax.swing.JButton jBtnLimpiar;
    private javax.swing.JButton jBtnSintactico;
    private javax.swing.JCheckBox jChCodigoFuente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextPane jTxtCodigoFuente;
    private javax.swing.JTextArea jTxtValidacionSintactico;
    private javax.swing.JTextArea jTxtValidacionTokens;
    // End of variables declaration//GEN-END:variables

    private void applyColors() {
        // Aplicar estilos al documento
        DefaultStyledDocument doc = new DefaultStyledDocument() {
            @Override
            public void insertString(int offSet, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offSet, str, a);
                applySyntaxHighlighting(this);
            }

            @Override
            public void remove(int offSet, int len) throws BadLocationException {
                super.remove(offSet, len);
                applySyntaxHighlighting(this);
            }
        };

        // Aplicar el documento al JTextPane
        JTextPane txt = new JTextPane(doc);
        String temp = this.jTxtCodigoFuente.getText();
        this.jTxtCodigoFuente.setStyledDocument(txt.getStyledDocument());
        this.jTxtCodigoFuente.setText(temp);

        // Aplicar resaltado de sintaxis
        applySyntaxHighlighting(doc);
    }

    // Método para aplicar el estilo a las palabras reservadas, tipos de datos y números
    private void applySyntaxHighlighting(StyledDocument doc) {
        try {
            // Obtener todo el texto del documento
            String text = doc.getText(0, doc.getLength());

            // PASO 1: Resetear todo el texto al estilo normal
            // Esto limpia cualquier formato previo antes de aplicar los nuevos estilos
            doc.setCharacterAttributes(0, doc.getLength(), normal, true);

            // PASO 2: Crear patrones de expresiones regulares para identificar cada elemento
            Pattern stringPattern = Pattern.compile("\"([^\"\\\\]|\\\\.)*\"");    // Cadenas: "texto"
            Pattern charPattern = Pattern.compile("'([^'\\\\]|\\\\.)'");          // Caracteres: 'c'
            Pattern reservedPattern = Pattern.compile("\\b(main|Finish|cin|cout|while|if|else)\\b");  // Palabras reservadas
            Pattern dataTypesPattern = Pattern.compile("\\b(int|string|char|float|double|boolean)\\b"); // Tipos de datos
            Pattern numbersPattern = Pattern.compile("\\b-?\\d+(\\.\\d+)?\\b");   // Números enteros y decimales

            // PASO 3: Aplicar estilos por ORDEN DE PRIORIDAD
            // ⚠️ IMPORTANTE: Primero cadenas y caracteres, después el resto
            // Esto evita que palabras dentro de cadenas se coloreen incorrectamente
            // 1. Aplicar estilo a cadenas (comillas dobles) - PRIORIDAD ALTA
            Matcher stringMatcher = stringPattern.matcher(text);
            while (stringMatcher.find()) {
                int start = stringMatcher.start();           // Posición donde inicia la cadena
                int length = stringMatcher.end() - start;    // Longitud de la cadena
                doc.setCharacterAttributes(start, length, strings, false);  // Aplicar estilo verde
            }

            // 2. Aplicar estilo a caracteres (comillas simples) - PRIORIDAD ALTA
            Matcher charMatcher = charPattern.matcher(text);
            while (charMatcher.find()) {
                int start = charMatcher.start();
                int length = charMatcher.end() - start;
                doc.setCharacterAttributes(start, length, character, false);  // Aplicar estilo azul
            }

            // 3. Aplicar estilo a palabras reservadas - PRIORIDAD BAJA
            // ⚠️ CLAVE: Verificamos que NO estén dentro de cadenas o caracteres
            Matcher reservedMatcher = reservedPattern.matcher(text);
            while (reservedMatcher.find()) {
                int start = reservedMatcher.start();
                int length = reservedMatcher.end() - start;

                // 🔍 VERIFICACIÓN IMPORTANTE: ¿Está dentro de una cadena o carácter?
                if (!isInsideStringOrChar(text, start, stringPattern, charPattern)) {
                    doc.setCharacterAttributes(start, length, reserved, false);
                }
            }

            // 4. Aplicar estilo a tipos de datos - PRIORIDAD BAJA
            Matcher dataTypesMatcher = dataTypesPattern.matcher(text);
            while (dataTypesMatcher.find()) {
                int start = dataTypesMatcher.start();
                int length = dataTypesMatcher.end() - start;

                // 🔍 Misma verificación: no colorear si está dentro de cadenas
                if (!isInsideStringOrChar(text, start, stringPattern, charPattern)) {
                    doc.setCharacterAttributes(start, length, dataTypes, false);
                }
            }

            // 5. Aplicar estilo a números - PRIORIDAD BAJA
            Matcher numbersMatcher = numbersPattern.matcher(text);
            while (numbersMatcher.find()) {
                int start = numbersMatcher.start();
                int length = numbersMatcher.end() - start;

                // 🔍 Misma verificación para números
                if (!isInsideStringOrChar(text, start, stringPattern, charPattern)) {
                    doc.setCharacterAttributes(start, length, numbers, false);
                }
            }

        } catch (BadLocationException e) {
            System.err.println(e.getMessage());
        }
    }
    // 🔧 MÉTODO AUXILIAR CLAVE: Verifica si una posición está dentro de una cadena o carácter
    // Esto previene colorear palabras que están dentro de cadenas

    private boolean isInsideStringOrChar(String text, int position, Pattern stringPattern, Pattern charPattern) {

        // Verificar si la posición está dentro de una cadena "..."
        Matcher stringMatcher = stringPattern.matcher(text);
        while (stringMatcher.find()) {
            // Si la posición está entre el inicio y fin de una cadena
            if (position >= stringMatcher.start() && position < stringMatcher.end()) {
                return true;  // Sí está dentro de una cadena
            }
        }

        // Verificar si la posición está dentro de un carácter '...'
        Matcher charMatcher = charPattern.matcher(text);
        while (charMatcher.find()) {
            // Si la posición está entre el inicio y fin de un carácter
            if (position >= charMatcher.start() && position < charMatcher.end()) {
                return true;  // Sí está dentro de un carácter
            }
        }

        return false;  // No está dentro de ninguna cadena o carácter
    }
}
